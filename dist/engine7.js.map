{"version":3,"sources":["engine7.js"],"names":[],"mappingsfile":"engine7.js","sourcesContent":["window.Engine7 = (function() {\n    'use strict';\n\n    function isNull(str) {\n        return str === null || str === \"\" || str === undefined;\n    }\n\n    function encodeJSON(json){\n        for (var key in json) {\n            json[key] = encodeURIComponent(json[key]);\n        }\n        return json;\n    }\n\n\n    function Engine7(){\n        var engine = this;\n\n        var ATTR_TEMPLATE7 = \"text/template7\";\n        var ATTR_ID = \"id\";\n        var ATTR_TPL_ID = \"data-tpl-id\";\n        var ATTR_URL = \"data-api-url\";\n        var ATTR_METHOD = \"data-api-method\";\n        var ATTR_PARAMS = \"data-api-param\";\n        var ATTR_REF = \"data-tpl-ref\";\n\n        this.requests = [];\n        this.templates = {};\n        this.tasks = 0;\n        this.complete = null;\n        this.events = {\n            beforeInvoke : {},\n            afterInvoke : {},\n            beforeRender : {},\n            afterRender : {},\n            error : {}\n        };\n\n        function Request(element){\n            var req = this;\n            this.id = null;\n            this.url = null;\n            this.params = null;\n            this.method = \"GET\";\n            this.tpl = null;\n            this.dom = null;\n            this.context = {};\n            this.handleSuccess = function(data, status){\n                if(!isNull(req.id)){\n                    var afterInvokeEventCB = engine.events.afterInvoke[req.id];\n                    if(!isNull(afterInvokeEventCB)){\n                        afterInvokeEventCB(data, status, req);\n                    }\n                }\n                data.$context = req.context;\n                if(!isNull(req.tpl)){\n                    req.tpl.render(data, req.dom);\n                }\n            };\n            this.handleError = function (xhr, status, error) {\n                if(!isNull(req.id) && !isNull(engine.events.error[req.id])){\n                    var errorEventCB = engine.events.error[req.id];\n                    if(!isNull(errorEventCB)){\n                        errorEventCB(xhr, status, error, req);\n                    }\n                }else{\n                    console.error(error);\n                    throw new Error(\"Error occurs when invoking request [\" + req.url + \"]\");\n                }\n\n            };\n            this.invoke = function(){\n\n                var urlTemplate = Template7.compile(req.url);\n                var url = urlTemplate(req.context);\n                var params = {};\n                if(!isNull(req.params)){\n                    var paramsTemplate = Template7.compile(req.params);\n                    params = paramsTemplate(req.context);\n                    try {\n                        params = eval(\"(\" + params + \")\");\n                    } catch (e) {\n                        console.error(e);\n                        throw new Error(\"Can not parse params to JSON. [\"+ req.id + \"].\");\n                    }\n                    if(req.method == \"GET\"){\n                        params = encodeJSON(params);\n                    }\n                }\n                var options = {\n                    url : url,\n                    type : req.method,\n                    dataType: \"json\",\n                    data : params,\n                    success : req.handleSuccess,\n                    error : req.handleError\n                };\n                if(!isNull(req.id)){\n                    var beforeInvokeEventCB = engine.events.beforeInvoke[req.id];\n                    if(!isNull(beforeInvokeEventCB)){\n                        beforeInvokeEventCB(options, req);\n                    }\n                }\n\n                $.ajax(options).done(function(){\n                    engine.tasks--;\n                });\n                engine.tasks ++;\n            };\n            this.init = function(){\n                var tplId = $(element).attr(ATTR_TPL_ID);\n                var method = $(element).attr(ATTR_METHOD);\n                var id = $(element).attr(ATTR_ID);\n                if(!isNull(tplId)){\n                    req.tpl = engine.templates[tplId];\n                    if(isNull(req.tpl)){\n                        throw new Error(\"Undefined template [\" + tplId + \"].\");\n                    }\n                    $(element).attr(ATTR_REF,tplId);\n                }\n                if(!isNull(method)){\n                    req.method = method;\n                }\n                if(!isNull(id)){\n                    req.id = id;\n                }\n                req.url = $(element).attr(ATTR_URL);\n                req.params = $(element).attr(ATTR_PARAMS);\n                req.dom = $(element);\n\n            };\n            this.init();\n        }\n\n        function Template(element){\n            var tpl = this;\n            this.id = null;\n            this.src = null;\n\n\n            this.render = function (context, dom) {\n\n                var srcTemplate = Template7.compile(tpl.src);\n\n                var beforeRenderEventCB = engine.events.beforeRender[tpl.id];\n                if(!isNull(beforeRenderEventCB)){\n                    beforeRenderEventCB(context,tpl);\n                }\n\n                var html = srcTemplate(context);\n                var els = $(html);\n                dom.append(els);\n\n                var afterRenderEventCB = engine.events.afterRender[tpl.id];\n                if(!isNull(afterRenderEventCB)){\n                    afterRenderEventCB(els,tpl);\n                }\n\n                var reqdoms = els.filter(\"[\" + ATTR_URL + \"]\");\n                reqdoms.each(function () {\n                    var req = new Request(this);\n                    req.context = context;\n                    req.invoke();\n                });\n\n                if(engine.tasks === 1 && reqdoms.length === 0){\n                    engine.complete();\n                }\n\n            };\n            this.init = function(){\n                tpl.id = $(element).attr(\"id\");\n                tpl.src = $(element).html();\n                if(isNull(tpl.id)){\n                    throw new Error(\"ID is undefined in template.\");\n                }\n            };\n            this.init();\n        }\n\n        this.invokeAll = function(){\n            for(var i = 0;i < engine.requests.length; i++){\n                var req = engine.requests[i];\n                req.invoke();\n            }\n        };\n\n        this.complete = function(cb){\n            engine.invokeAll();\n            engine.complete = cb;\n        };\n\n        this.onBeforeRender = function(tplId, cb){\n            engine.events.beforeRender[tplId] = cb;\n        };\n\n        this.onAfterRender = function(tplId, cb){\n            engine.events.afterRender[tplId] = cb;\n        };\n\n        this.onBeforeInvoke = function(reqId, cb){\n            engine.events.beforeInvoke[reqId] = cb;\n        };\n\n        this.onAfterInvoke = function(reqId, cb){\n            engine.events.afterInvoke[reqId] = cb;\n        };\n\n        this.onError = function(reqId, cb){\n            engine.events.error[reqId] = cb;\n        };\n\n        this._init = function(){\n\n            $(\"script[type='\" + ATTR_TEMPLATE7 + \"']\").each(function(i) {\n                var template = new Template(this);\n                engine.templates[template.id] = template;\n            });\n\n            $(\"[\" + ATTR_URL + \"]\").each(function() {\n                var request = new Request(this);\n                engine.requests.push(request);\n            });\n        };\n\n        this._init();\n\n    }\n\n    var e7 = new Engine7();\n    return e7;\n\n})();\n"]}