{"version":3,"sources":["engine7.js"],"names":[],"mappingsfile":"engine7.js","sourcesContent":["window.Engine7 = (function() {\n    'use strict';\n\n    function isNull(str) {\n        return str === null || str === \"\" || str === undefined;\n    }\n\n    function getArrayIndex(arr,e) {\n        for(var i=0; i<arr.length; i++){\n            if(arr[i] == e){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function encodeJSON(json){\n        for (var key in json) {\n            json[key] = encodeURIComponent(json[key]);\n        }\n        return json;\n    }\n\n    function randomString(len) {\n      len = len || 8;\n      var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var maxPos = chars.length;\n      var pwd = '';\n      for (var i = 0; i < len; i++) {\n        pwd += chars.charAt(Math.floor(Math.random() * maxPos));\n      }\n      return pwd;\n    }\n\n    function Engine7(){\n        var engine = this;\n\n        var ATTR_TEMPLATE7 = \"text/template7\";\n        var ATTR_ID = \"id\";\n        var ATTR_TPL_ID = \"data-tpl-id\";\n        var ATTR_URL = \"data-api-url\";\n        var ATTR_METHOD = \"data-api-method\";\n        var ATTR_PARAMS = \"data-api-param\";\n        var ATTR_REF = \"data-tpl-ref\";\n        var ATTR_AJAX_FORM = \"data-ajax-form\";\n\n        this.requests = {};\n        this.templates = {};\n        this.forms = {};\n        this.tasks = 0;\n        this.completeCB = null;\n        this.events = {\n            beforeInvoke : {},\n            afterInvoke : {},\n            beforeRender : {},\n            afterRender : {},\n            invokeError : {},\n            beforeSubmit : {},\n            submitBack : {},\n            submitError : {}\n        };\n\n        function Request(element){\n            var req = this;\n\n            this.id = null;\n            this.url = null;\n            this.params = null;\n            this.method = \"GET\";\n            this.tpl = null;\n            this.dom = null;\n            this.context = {};\n            this.onBeforeInvoke = null;\n            this.onAfterInvoke = null;\n            this.onInvokeError = null;\n\n            this.handleSuccess = function(data, status){\n                if(!isNull(req.onAfterInvoke)){\n                    req.onAfterInvoke(data, status, req);\n                }\n                data.$context = req.context;\n                if(!isNull(req.tpl)){\n                    req.tpl.render(data, req.dom);\n                }\n            };\n            this.handleError = function (xhr, status, error) {\n                if(!isNull(req.onInvokeError)){\n                    req.onInvokeError(xhr, status, error, req);\n                }else{\n                    console.error(error);\n                    throw new Error(\"Error occurs when invoking request [\" + req.url + \"]\");\n                }\n\n            };\n            this.invoke = function(){\n\n                var urlTemplate = Template7.compile(req.url);\n                var url = urlTemplate(req.context);\n                var params = {};\n                if(!isNull(req.params)){\n                    var paramsTemplate = Template7.compile(req.params);\n                    params = paramsTemplate(req.context);\n                    try {\n                        params = eval(\"(\" + params + \")\");\n                    } catch (e) {\n                        console.error(e);\n                        throw new Error(\"Can not parse params to JSON. [\"+ req.url + \"].\");\n                    }\n                    if(req.method == \"GET\"){\n                        params = encodeJSON(params);\n                    }\n                }\n                var options = {\n                    url : url,\n                    type : req.method,\n                    dataType: \"json\",\n                    data : params,\n                    success : req.handleSuccess,\n                    error : req.handleError\n                };\n\n                if(!isNull(req.onBeforeInvoke)){\n                  req.onBeforeInvoke(options, req);\n                }\n\n                $.ajax(options).done(function(){\n                    engine.tasks--;\n                });\n                engine.tasks ++;\n            };\n            this.init = function(){\n                var tplId = $(element).attr(ATTR_TPL_ID);\n                var method = $(element).attr(ATTR_METHOD);\n                var id = $(element).attr(ATTR_ID);\n                if(!isNull(tplId)){\n                    req.tpl = engine.templates[tplId];\n                    if(isNull(req.tpl)){\n                        throw new Error(\"Undefined template [\" + tplId + \"].\");\n                    }\n                    $(element).attr(ATTR_REF,tplId);\n                }\n                if(!isNull(method)){\n                    req.method = method;\n                }\n                if(isNull(id)){\n                    req.id = \"req-\" + randomString();\n                }\n                req.url = $(element).attr(ATTR_URL);\n                req.params = $(element).attr(ATTR_PARAMS);\n                req.dom = $(element);\n\n                var identify = engine.events.beforeInvoke[\"*\"] ? \"*\" : req.id;\n                req.onBeforeInvoke = engine.events.beforeInvoke[identify];\n\n                identify = engine.events.afterInvoke[\"*\"] ? \"*\" : req.id;\n                req.onAfterInvoke = engine.events.afterInvoke[identify];\n\n                identify = engine.events.invokeError[\"*\"] ? \"*\" : req.id;\n                req.onInvokeError = engine.events.invokeError[identify];\n\n            };\n            this.init();\n        }\n\n        function Template(element){\n            var tpl = this;\n\n            this.id = null;\n            this.src = null;\n            this.onBeforeRender = null;\n            this.onAfterRender = null;\n\n            this.render = function (context, dom) {\n\n                var srcTemplate = Template7.compile(tpl.src);\n\n                if(!isNull(tpl.onBeforeRender)){\n                  tpl.onBeforeRender(context,tpl);\n                }\n\n                var html = srcTemplate(context);\n                var els = $(html);\n                dom.append(els);\n\n                if(!isNull(tpl.onAfterRender)){\n                  tpl.onAfterRender(els,tpl);\n                }\n\n                var reqdoms = els.filter(\"[\" + ATTR_URL + \"]\");\n                reqdoms.each(function () {\n                    var req = new Request(this);\n                    req.context = context;\n                    req.invoke();\n                    engine.requests[req.id] = req;\n                });\n\n                if(engine.tasks === 1 && reqdoms.length === 0){\n                    engine.completeCB();\n                }\n\n            };\n            this.init = function(){\n                tpl.id = $(element).attr(\"id\");\n                tpl.src = $(element).html();\n                if(isNull(tpl.id)){\n                    throw new Error(\"ID is required on template.\");\n                }\n\n                var identify = engine.events.beforeRender[\"*\"] ? \"*\" : tpl.id;\n                tpl.onBeforeRender = engine.events.beforeRender[identify];\n\n                identify = engine.events.afterRender[\"*\"] ? \"*\" : tpl.id;\n                tpl.onAfterRender = engine.events.afterRender[identify];\n            };\n            this.init();\n        }\n\n        function Form(element) {\n            var form = this;\n            var INPUT_TYPE = [\"text\",\"hidden\",\"password\",\"checkbox\",\"radio\"];\n\n            this.id = null;\n            this.el = null;\n            this.action = null;\n            this.method = \"GET\";\n            this.elements = [];\n            this.onBeforeSubmit = null;\n            this.onSubmitBack = null;\n            this.onSubmitError = null;\n\n            this.putElJSON = function (json, name, value) {\n                var arr = name.split(/\\./);\n                while(arr.length > 1){\n                    var node = arr.shift();\n                    if(!json[node]){\n                        json[node] = {};\n                    }\n                    json = json[node];\n                }\n                var last = arr[arr.length - 1];\n                if(json[last]){\n                    var tmp = [json[last]];\n                    tmp.push(value);\n                    json[last] = tmp;\n                }else{\n                    json[last] = value;\n                }\n            };\n\n            this.toJSON = function () {\n                var json = {};\n                    for(var i=0; i<form.elements.length; i++){\n                    var el = form.elements[i];\n                    var tag = el.tagName;\n                    var type = $(el).attr(\"type\");\n                    var name = $(el).attr(\"name\");\n                    var val = $(el).val();\n                    if(tag === \"INPUT\" && (type === \"checkbox\" || type === \"radio\")){\n                        if(!$(el).is(':checked')) {\n                            continue;\n                        }\n                    }\n                    form.putElJSON(json, name, val);\n                }\n                return json;\n            };\n            this.handleSuccess = function(data, status){\n                if(!isNull(form.onSubmitBack)){\n                  form.onSubmitBack(data, status, form);\n                }\n            };\n            this.handleError = function (xhr, status, error) {\n                if(!isNull(form.onSubmitError)){\n                  form.onSubmitError(xhr, status, error, form);\n                }else{\n                    console.error(error);\n                    throw new Error(\"Error occurs when submit form [\" + form.id + \"]\");\n                }\n\n            };\n            this.submit = function () {\n                var json = form.toJSON();\n                if(!isNull(form.onBeforeSubmit)){\n                  form.onBeforeSubmit(json, form);\n                }\n\n                var options = {\n                    url : form.action,\n                    type : form.method,\n                    dataType: \"json\",\n                    data : json,\n                    success : form.handleSuccess,\n                    error : form.handleError\n                };\n\n                $.ajax(options).done(function(){\n                    $(element).find(\"input[type='submit']\").removeAttr(\"disabled\");\n                });\n            };\n            this.init = function () {\n                form.id = $(element).attr(\"id\");\n                form.action = $(element).attr(\"action\");\n                form.el = element;\n\n                if(isNull(form.id)){\n                    form.id = \"form-\" + randomString();\n                }\n                if(isNull(form.action)){\n                    throw new Error(\"Action is required on data-ajax-form.\");\n                }\n                var method = $(element).attr(\"method\");\n                if(!isNull(method)){\n                    form.method = method;\n                }\n                $(element).find(\"input,textarea,select\").each(function () {\n                    var name = $(this).attr(\"name\");\n                    var type = $(this).attr(\"type\");\n                    var tag = this.tagName;\n                    if(!isNull(name)){\n                        if(tag === \"INPUT\" && getArrayIndex(INPUT_TYPE, type) < 0){//Not supported\n                            return true;\n                        }\n                        form.elements.push(this);\n                    }\n                });\n                $(element).submit(function () {\n                    $(element).find(\"input[type='submit']\").attr(\"disabled\",\"disabled\");\n                    form.submit();\n                    return false;\n                });\n\n                var identify = engine.events.beforeSubmit[\"*\"] ? \"*\" : form.id;\n                form.onBeforeSubmit = engine.events.beforeSubmit[identify];\n\n                identify = engine.events.submitBack[\"*\"] ? \"*\" : form.id;\n                form.onSubmitBack = engine.events.submitBack[identify];\n\n                identify = engine.events.submitError[\"*\"] ? \"*\" : form.id;\n                form.onSubmitError = engine.events.submitError[identify];\n            };\n            this.init();\n        }\n\n        this._invokeAll = function(){\n            var count = 0;\n            for(var key in engine.requests){\n              var req = engine.requests[key];\n              req.invoke();\n              count ++;\n            }\n            if(count === 0){\n                engine.completeCB();\n            }\n        };\n\n        this.complete = function(cb){\n            engine._init();\n            engine.completeCB = function () {\n                engine._initForms();\n                if(cb){\n                    cb();\n                }\n            };\n            engine._invokeAll();\n        };\n\n        this.onBeforeRender = function(tplId, cb){\n            engine.events.beforeRender[tplId] = cb;\n        };\n\n        this.onAfterRender = function(tplId, cb){\n            engine.events.afterRender[tplId] = cb;\n        };\n\n        this.onBeforeInvoke = function(reqId, cb){\n            engine.events.beforeInvoke[reqId] = cb;\n        };\n\n        this.onAfterInvoke = function(reqId, cb){\n            engine.events.afterInvoke[reqId] = cb;\n        };\n\n        this.onInvokeError = function(reqId, cb){\n            engine.events.invokeError[reqId] = cb;\n        };\n\n        this.onBeforeSubmit = function (formId, cb) {\n            engine.events.beforeSubmit[formId] = cb;\n        };\n\n        this.onSubmitBack = function (formId, cb) {\n            engine.events.submitBack[formId] = cb;\n        };\n\n        this.onSubmitError = function (formId, cb) {\n            engine.events.submitError[formId] = cb;\n        };\n\n        this._init = function(){\n            $(\"script[type='\" + ATTR_TEMPLATE7 + \"']\").each(function() {\n                var template = new Template(this);\n                engine.templates[template.id] = template;\n            });\n\n            $(\"[\" + ATTR_URL + \"]\").each(function() {\n                var request = new Request(this);\n                engine.requests[request.id] = request;\n            });\n        };\n\n        this._initForms = function () {\n            $(\"[\" + ATTR_AJAX_FORM + \"]\").each(function() {\n                var form = new Form(this);\n                engine.forms[form.id] = form;\n            });\n        };\n\n    }\n\n    var e7 = new Engine7();\n    return e7;\n\n})();\n"]}